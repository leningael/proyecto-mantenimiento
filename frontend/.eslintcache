[{"/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/index.js":"1","/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/reportWebVitals.js":"2","/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/store.js":"3","/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/App.js":"4","/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/reducers/cartReducers.js":"5","/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/reducers/orderReducers.js":"6","/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/reducers/productReducers.js":"7","/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/reducers/userReducers.js":"8","/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/components/Footer.js":"9","/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/screens/HomeScreen.js":"10","/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/components/Header.js":"11","/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/screens/LoginScreen.js":"12","/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/screens/CartScreen.js":"13","/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/screens/RegisterScreen.js":"14","/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/screens/PaymentScreen.js":"15","/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/screens/ShippingScreen.js":"16","/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/screens/ProfileScreen.js":"17","/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/screens/ProductScreen.js":"18","/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/screens/UserEditScreen.js":"19","/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/screens/PlaceOrderScreen.js":"20","/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/screens/OrderScreen.js":"21","/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/screens/UserListScreen.js":"22","/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/screens/ProductListScreen.js":"23","/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/screens/ProductEditScreen.js":"24","/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/screens/OrderListScreen.js":"25","/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/components/Message.js":"26","/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/components/Paginate.js":"27","/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/components/Loader.js":"28","/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/components/Logins.js":"29","/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/components/Product.js":"30","/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/components/FormContainer.js":"31","/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/components/SearchBox.js":"32","/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/components/ProductCarousel.js":"33","/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/screens/login.js":"34","/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/components/CheckoutSteps.js":"35","/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/constants/cartConstants.js":"36","/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/constants/userConstants.js":"37","/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/constants/productConstants.js":"38","/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/constants/orderConstants.js":"39","/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/actions/cartActions.js":"40","/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/actions/userActions.js":"41","/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/actions/productActions.js":"42","/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/actions/orderActions.js":"43","/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/components/Rating.js":"44"},{"size":630,"mtime":1669527071000,"results":"45","hashOfConfig":"46"},{"size":379,"mtime":1669527071000,"results":"47","hashOfConfig":"46"},{"size":2481,"mtime":1669527071000,"results":"48","hashOfConfig":"46"},{"size":2251,"mtime":1669527071000,"results":"49","hashOfConfig":"46"},{"size":1503,"mtime":1669527071000,"results":"50","hashOfConfig":"46"},{"size":4079,"mtime":1669527071000,"results":"51","hashOfConfig":"46"},{"size":4080,"mtime":1669527071000,"results":"52","hashOfConfig":"46"},{"size":3945,"mtime":1669527071000,"results":"53","hashOfConfig":"46"},{"size":594,"mtime":1669527071000,"results":"54","hashOfConfig":"46"},{"size":1672,"mtime":1683449306104,"results":"55","hashOfConfig":"46"},{"size":2788,"mtime":1683449807279,"results":"56","hashOfConfig":"46"},{"size":3323,"mtime":1683449091511,"results":"57","hashOfConfig":"46"},{"size":5161,"mtime":1683449286530,"results":"58","hashOfConfig":"46"},{"size":4139,"mtime":1669527071000,"results":"59","hashOfConfig":"46"},{"size":1856,"mtime":1669527071000,"results":"60","hashOfConfig":"46"},{"size":3329,"mtime":1669527071000,"results":"61","hashOfConfig":"46"},{"size":7067,"mtime":1683449595867,"results":"62","hashOfConfig":"46"},{"size":12091,"mtime":1683449571319,"results":"63","hashOfConfig":"46"},{"size":4100,"mtime":1669527071000,"results":"64","hashOfConfig":"46"},{"size":6927,"mtime":1683449463618,"results":"65","hashOfConfig":"46"},{"size":10454,"mtime":1683449534583,"results":"66","hashOfConfig":"46"},{"size":3656,"mtime":1669527071000,"results":"67","hashOfConfig":"46"},{"size":5273,"mtime":1669527071000,"results":"68","hashOfConfig":"46"},{"size":8190,"mtime":1669527071000,"results":"69","hashOfConfig":"46"},{"size":3768,"mtime":1669527071000,"results":"70","hashOfConfig":"46"},{"size":245,"mtime":1669527071000,"results":"71","hashOfConfig":"46"},{"size":913,"mtime":1669527071000,"results":"72","hashOfConfig":"46"},{"size":499,"mtime":1669527071000,"results":"73","hashOfConfig":"46"},{"size":443,"mtime":1683449061524,"results":"74","hashOfConfig":"46"},{"size":1118,"mtime":1669527071000,"results":"75","hashOfConfig":"46"},{"size":407,"mtime":1669527071000,"results":"76","hashOfConfig":"46"},{"size":1181,"mtime":1669527071000,"results":"77","hashOfConfig":"46"},{"size":1419,"mtime":1669527071000,"results":"78","hashOfConfig":"46"},{"size":582,"mtime":1683449078962,"results":"79","hashOfConfig":"46"},{"size":1657,"mtime":1669527071000,"results":"80","hashOfConfig":"46"},{"size":287,"mtime":1669527071000,"results":"81","hashOfConfig":"46"},{"size":1498,"mtime":1669527071000,"results":"82","hashOfConfig":"46"},{"size":1520,"mtime":1669527071000,"results":"83","hashOfConfig":"46"},{"size":1240,"mtime":1669527071000,"results":"84","hashOfConfig":"46"},{"size":1479,"mtime":1669527071000,"results":"85","hashOfConfig":"46"},{"size":7755,"mtime":1669527071000,"results":"86","hashOfConfig":"46"},{"size":6236,"mtime":1669527071000,"results":"87","hashOfConfig":"46"},{"size":6283,"mtime":1669527071000,"results":"88","hashOfConfig":"46"},{"size":1946,"mtime":1669527071000,"results":"89","hashOfConfig":"46"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1oleysi",{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116"},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119"},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122"},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125"},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128"},{"filePath":"129","messages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131"},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134"},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137"},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140"},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143"},{"filePath":"144","messages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146"},{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149"},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154"},{"filePath":"155","messages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163"},{"filePath":"164","messages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166"},{"filePath":"167","messages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"169","messages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175"},{"filePath":"176","messages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"178","messages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"180","messages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"184","messages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"186","messages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"188","messages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190"},{"filePath":"191","messages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193"},{"filePath":"194","messages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196"},{"filePath":"197","messages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/index.js",[],"/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/reportWebVitals.js",[],"/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/store.js",[],"/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/App.js",[],"/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/reducers/cartReducers.js",[],"/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/reducers/orderReducers.js",[],"/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/reducers/productReducers.js",[],"/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/reducers/userReducers.js",[],"/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/components/Footer.js",[],"/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/screens/HomeScreen.js",["199","200"],"//Paul Hernandez \nimport React, { useState, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Row, Col } from 'react-bootstrap'\nimport Product from '../components/Product'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport Paginate from '../components/Paginate'\nimport ProductCarousel from '../components/ProductCarousel'\nimport { listProducts } from '../actions/productActions'\n\n\nfunction HomeScreen({ history }) {\n    const dispatch = useDispatch()\n    const productList = useSelector(state => state.productList)\n    const { error, loading, products, page, pages } = productList\n\n    let keyword = history.location.search\n\n    useEffect(() => {\n        dispatch(listProducts(keyword))\n\n    }, [dispatch, keyword])\n\n    return (\n        //Pagina principal de el e-commerce donde se muestran todos los productos existentes, se llama a la lista de productos desde el archivo productsAction.js\n        <div>\n            <h1>Productos en existencia</h1>\n            {loading ? <Loader />\n                : error ? <Message variant='danger'>{error}</Message>\n                    :\n                    <div>\n                        <Row>\n                            {products.map(product => (\n                                <Col key={product._id} xs={3}>\n                                    <Product product={product} />\n                                </Col>\n                            ))}\n                        </Row>\n                        <Paginate page={page} pages={pages} keyword={keyword} />\n                    </div>\n            }\n        </div>\n    )\n}\n\nexport default HomeScreen\n","/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/components/Header.js",["201","202"],"//Paul Hernandez y Vianey Martinez \nimport React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Navbar, Nav, Container, Row, NavDropdown } from 'react-bootstrap'\nimport { LinkContainer } from 'react-router-bootstrap'\nimport SearchBox from './SearchBox'\nimport { logout } from '../actions/userActions'\n\nfunction Header() { /*Encabezado/Navbar*/\n\n    const userLogin = useSelector(state => state.userLogin)\n    const { userInfo } = userLogin\n\n    const dispatch = useDispatch()\n\n    const logoutHandler = () => {\n        dispatch(logout())\n    }\n\n    return (\n        <header /*Conexion a los links de las paginas*/>\n          <Navbar bg=\"warningt\" variant=\"bg-warning\">\n            <Container>\n              <img\n                src=\"https://raw.githubusercontent.com/metodosformalesds/MFDS_2022_T2_Code/main/LogoVetPet.png\"\n                width=\"100px\"\n              ></img>\n              <LinkContainer to=\"/\">\n                <Navbar.Brand>vetpet</Navbar.Brand>\n              </LinkContainer>\n              <SearchBox />\n              <Nav className=\"ml-auto\">\n                <LinkContainer to=\"/cart\">\n                  <Nav.Link>\n                    <i className=\"fas fa-shopping-cart\"></i>Carrito\n                  </Nav.Link>\n                </LinkContainer>\n    \n                {userInfo ? (\n                  <NavDropdown title={userInfo.name} id=\"username\">\n                    <LinkContainer to=\"/profile\">\n                      <NavDropdown.Item>Perfil</NavDropdown.Item>\n                    </LinkContainer>\n    \n                    <NavDropdown.Item onClick={logoutHandler}>\n                      Cerrar sesión\n                    </NavDropdown.Item>\n                  </NavDropdown>\n                ) : (\n                  <LinkContainer to=\"/login\">\n                    <Nav.Link>\n                      <i className=\"fas fa-user\"></i>Inicar sesión\n                    </Nav.Link>\n                  </LinkContainer>\n                )}\n    \n                {userInfo && userInfo.isAdmin && (\n                  <NavDropdown title=\"Admin\" id=\"adminmenue\">\n                    <LinkContainer to=\"/admin/userlist\">\n                      <NavDropdown.Item>Usuarios</NavDropdown.Item>\n                    </LinkContainer>\n    \n                    <LinkContainer to=\"/admin/productlist\">\n                      <NavDropdown.Item>Productos</NavDropdown.Item>\n                    </LinkContainer>\n                    \n                    <LinkContainer to=\"/admin/orderlist\">\n                      <NavDropdown.Item>Ordenes</NavDropdown.Item>\n                    </LinkContainer>\n                  </NavDropdown>\n                )}\n              </Nav>\n            </Container>\n          </Navbar>\n        </header>\n      );\n}\n\nexport default Header\n","/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/screens/LoginScreen.js",["203"],"//Vianey Martinez\n\nimport React, { useState, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { Form, Button, Row, Col } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport FormContainer from '../components/FormContainer'\nimport { login } from '../actions/userActions'\nimport Logins from '../components/Logins';\nimport {gapi} from \"gapi-script\"\nimport LoginButton from './login'\nconst clientId=\"795948132843-dcfvnj4f58c0jisogn9qfqnsg20hat0f.apps.googleusercontent.com\"\n\nfunction LoginScreen({ location, history }) {\n    //valores de usuarios \n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n\n    const dispatch = useDispatch()\n\n    const redirect = location.search ? location.search.split('=')[1] : '/'\n\n    const userLogin = useSelector(state => state.userLogin)\n    const { error, loading, userInfo } = userLogin\n     \n      //Enviar la información de usuario\n    useEffect(() => {\n        if (userInfo) {\n            history.push(redirect)\n        }\n    }, [history, userInfo, redirect])\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        dispatch(login(email, password))\n    }\n\n    useEffect(()=>{\n        function start(){\n          gapi.client.init({\n            clientId: clientId,\n            scope: \"\"\n          })\n        };\n        gapi.load('client:auth2', start)\n      });\n    return (\n        //Formulario para inicar sesion\n        <FormContainer>\n            <h1>Acceder a cuenta</h1>\n            {error && <Message variant='danger'>{error}</Message>}\n            {loading && <Loader />}\n\n            <Form onSubmit={submitHandler}>\n             <Form.Group controlId='email'>\n                    <Form.Label>Email</Form.Label>\n                    <Form.Control\n                        type='email'\n                        placeholder='Ingresa tu Email'\n                        value={email}\n                        onChange={(e) => setEmail(e.target.value)}\n                    >\n                    </Form.Control>\n                </Form.Group>\n\n\n                <Form.Group controlId='password'>\n                    <Form.Label>Password</Form.Label>\n                    <Form.Control\n                        type='password'\n                        placeholder='Ingresa tu Password'\n                        value={password}\n                        onChange={(e) => setPassword(e.target.value)}\n                    >\n                    </Form.Control>\n                </Form.Group>\n\n                <Button type='submit' variant='primary'>\n                    Iniciar sesión\n                </Button>\n                <br></br>\n                <LoginButton>\n                </LoginButton>\n                \n            </Form>            \n            <Row className='py-3'>\n                <Col>\n                    Eres cliente nuevo?, si es así solo registrate y listo <Link\n                        to={redirect ? `/register?redirect=${redirect}` : '/register'}>\n                        Registrar\n                        </Link>\n                </Col>\n            </Row>\n\n        </FormContainer>\n    )\n}\n\n//Exportar la funcion para que se pueda usar en otros archivos\nexport default LoginScreen\n","/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/screens/CartScreen.js",["204"],"//Paul Hernandez\nimport React, { useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Row, Col, ListGroup, Image, Form, Button, Card } from 'react-bootstrap'\nimport Message from '../components/Message'\nimport { addToCart, removeFromCart } from '../actions/cartActions'\n\nfunction CartScreen({ match, location, history }) {\n    const productId = match.params.id\n    const qty = location.search ? Number(location.search.split('=')[1]) : 1\n    const dispatch = useDispatch()\n\n    const cart = useSelector(state => state.cart)\n    const { cartItems } = cart\n\n    //Añadir los productos al carrito\n    useEffect(() => {\n        if (productId) {\n            dispatch(addToCart(productId, qty))\n        }\n    }, [dispatch, productId, qty])\n\n//Remover productos\n    const removeFromCartHandler = (id) => {\n        dispatch(removeFromCart(id))\n    }\n//Constante para checkout\n    const checkoutHandler = () => {\n        history.push('/login?redirect=shipping')\n    }\n\n    return (\n        <Row>\n            <Col xs={8}>\n                <h1>Carrito de compra</h1>\n                {cartItems.length === 0 ? (\n                    <Message variant='info'>\n                        Tu carrito está vacío <Link to='/'>Regresar</Link>\n                    </Message>\n                ) : (\n                    //Mostrando los productos del carrito y sus atributos\n                        <ListGroup variant='flush'>\n                            {cartItems.map(item => (\n                                <ListGroup.Item key={item.product}>\n                                    <Row>\n                                        <Col xs={2}>\n                                            <Image src={item.image} alt={item.name} fluid rounded />\n                                        </Col>\n                                        <Col xs={3}>\n                                            <Link to={`/product/${item.product}`}>{item.name}</Link>\n                                        </Col>\n\n                                        <Col xs={2}>\n                                            ${item.price}\n                                        </Col>\n\n                                            //Cantidad de productos\n                                        <Col xs={3}>\n                                            <Form.Control\n                                                as=\"select\"\n                                                value={item.qty}\n                                                onChange={(e) => dispatch(addToCart(item.product, Number(e.target.value)))}\n                                            >\n                                                {\n\n                                                    [...Array(item.countInStock).keys()].map((x) => (\n                                                        <option key={x + 1} value={x + 1}>\n                                                            {x + 1}\n                                                        </option>\n                                                    ))\n                                                }\n\n                                            </Form.Control>\n                                        </Col>\n                                        <Col xs={1}>\n                                            <Button /*Boton para remover productos*/\n                                                type='button'\n                                                variant='light'\n                                                onClick={() => removeFromCartHandler(item.product)}\n                                            >\n                                                <i className='fas fa-trash'></i>\n                                            </Button>\n                                        </Col>\n                                    </Row>\n                                </ListGroup.Item>\n                            ))}\n                        </ListGroup>\n                    )}\n            </Col>\n\n            <Col xs={4}>\n                <Card>\n                    <ListGroup variant='flush'>\n                        <ListGroup.Item>\n                            <h2>Subtotal ({cartItems.reduce((acc, item) => acc + item.qty, 0)}) artículos</h2>\n                            ${cartItems.reduce((acc, item) => acc + item.qty * item.price, 0).toFixed(2)}\n                        </ListGroup.Item>\n                    </ListGroup>\n\n                    <ListGroup.Item>\n                        <Button\n                            type='button'\n                            className='btn-block'\n                            disabled={cartItems.length === 0}\n                            onClick={checkoutHandler}\n                        >\n                            Ir al pago\n                        </Button>\n                    </ListGroup.Item>\n\n\n                </Card>\n            </Col>\n        </Row>\n\n        //Este formulario es la pantalla qde carrito, y muestra los datos como cantidad, atributos del carrito, precios, total y boton para checkout, eliminar\n    )\n}\n\nexport default CartScreen","/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/screens/RegisterScreen.js",["205"],"//Vianey Martinez\nimport React, { useState, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { Form, Button, Row, Col } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport FormContainer from '../components/FormContainer'\nimport { register } from '../actions/userActions'\n\nfunction RegisterScreen({ location, history }) {\n\n    const [name, setName] = useState('')\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n    const [confirmPassword, setConfirmPassword] = useState('')\n    const [message, setMessage] = useState('')\n\n    const dispatch = useDispatch()\n\n    const redirect = location.search ? location.search.split('=')[1] : '/'\n\n    const userRegister = useSelector(state => state.userRegister)\n    const { error, loading, userInfo } = userRegister\n\n    useEffect(() => {\n        if (userInfo) {\n            history.push(redirect)\n        }\n    }, [history, userInfo, redirect])\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n\n        if (password != confirmPassword) {\n            setMessage('Passwords do not match')\n        } else {\n            dispatch(register(name, email, password))\n        }\n\n    }\n\n    return (\n        <FormContainer /*Formulario para registrar una cuenta*/>\n            <h1>Registra una cuenta nueva</h1>\n            {message && <Message variant='danger'>{message}</Message>}\n            {error && <Message variant='danger'>{error}</Message>}\n            {loading && <Loader />}\n            <Form onSubmit={submitHandler}>\n\n                <Form.Group controlId='name'>\n                    <Form.Label>Nombre</Form.Label>\n                    <Form.Control\n                        required\n                        type='name'\n                        placeholder='Ingresa tu nombre'\n                        value={name}\n                        onChange={(e) => setName(e.target.value)  /*Obteniendodatos*/}\n                    >\n                    </Form.Control>\n                </Form.Group>\n\n                <Form.Group controlId='email'>\n                    <Form.Label>Correo</Form.Label>\n                    <Form.Control\n                        required\n                        type='email'\n                        placeholder='Ingresa tu correo'\n                        value={email}\n                        onChange={(e) => setEmail(e.target.value)}\n                    >\n                    </Form.Control>\n                </Form.Group>\n\n                <Form.Group controlId='password'>\n                    <Form.Label>Contraseña</Form.Label>\n                    <Form.Control\n                        required\n                        type='password'\n                        placeholder='Ingresa tu contraseña'\n                        value={password}\n                        onChange={(e) => setPassword(e.target.value)}\n                    >\n                    </Form.Control>\n                </Form.Group>\n\n                <Form.Group controlId='passwordConfirm'>\n                    <Form.Label>Confirma tu contraseña</Form.Label>\n                    <Form.Control\n                        required\n                        type='password'\n                        placeholder='Confirma tu contraseña'\n                        value={confirmPassword}\n                        onChange={(e) => setConfirmPassword(e.target.value)}\n                    >\n                    </Form.Control>\n                </Form.Group>\n\n                <Button type='submit' variant='primary'  /*Boton para registrar datos*/>\n                    Registrar cuenta\n                </Button>\n\n            </Form>\n\n            <Row className='py-3'>\n                <Col>\n                    ¿Ya tienes cuenta? <Link\n                        to={redirect ? `/login?redirect=${redirect}` : '/login'}  /*Redireccionar a iniciar sesion*/>\n                        Inicia sesión\n                        </Link>\n                </Col>\n            </Row>\n        </FormContainer >\n    )\n}\n\nexport default RegisterScreen\n","/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/screens/PaymentScreen.js",["206"],"//Paul Hernandez y Vianey Martinez \nimport React, { useState, useEffect } from 'react'\nimport { Form, Button, Col } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport FormContainer from '../components/FormContainer'\nimport CheckoutSteps from '../components/CheckoutSteps'\nimport { savePaymentMethod } from '../actions/cartActions'\n\nfunction PaymentScreen({ history }) {\n\n    const cart = useSelector(state => state.cart)\n    const { shippingAddress } = cart\n\n    const dispatch = useDispatch()\n\n    const [paymentMethod, setPaymentMethod] = useState('PayPal')\n\n    /*Verificar dirección de entrega*/\n    if (!shippingAddress.address) {\n        history.push('/shipping')\n    }\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        dispatch(savePaymentMethod(paymentMethod))\n        history.push('/placeorder')\n    }\n\n    return (\n        <FormContainer>\n            <CheckoutSteps step1 step2 step3 />\n            \n            <Form onSubmit={submitHandler}  /*Tipos de metodos de pago*/>\n                <Form.Group>\n                    <Form.Label as='legend'>Selecciona un método</Form.Label>\n                    <Col>\n                        <Form.Check\n                            type='radio'\n                            label='PayPal or Credit Card'\n                            id='paypal'\n                            name='paymentMethod'\n                            checked\n                            onChange={(e) => setPaymentMethod(e.target.value)}\n                        >\n                        </Form.Check>\n                    </Col>\n                </Form.Group>\n\n                <Button type='submit' variant='primary' /**/>\n                    Continuar\n                </Button>\n          \n            </Form>\n        </FormContainer>\n        \n    )\n}\n\nexport default PaymentScreen\n","/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/screens/ShippingScreen.js",["207"],"//Paul Hernandez\nimport React, { useState, useEffect } from 'react'\nimport { Form, Button } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport FormContainer from '../components/FormContainer'\nimport CheckoutSteps from '../components/CheckoutSteps'\nimport { saveShippingAddress } from '../actions/cartActions'\n\nfunction ShippingScreen({ history }) {\n\n    const cart = useSelector(state => state.cart)\n    const { shippingAddress } = cart\n\n    const dispatch = useDispatch()\n\n    const [address, setAddress] = useState(shippingAddress.address)\n    const [city, setCity] = useState(shippingAddress.city)\n    const [postalCode, setPostalCode] = useState(shippingAddress.postalCode)\n    const [country, setCountry] = useState(shippingAddress.country)\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        dispatch(saveShippingAddress({ address, city, postalCode, country }))\n        history.push('/payment')\n    }\n\n    return (\n        <FormContainer /*Formulario para ingresar datos de tu direccion*/>\n            <CheckoutSteps step1 step2 />\n            <h1>Envío</h1>\n            <Form onSubmit={submitHandler}>\n\n                <Form.Group controlId='address'>\n                    <Form.Label>Dirrección</Form.Label>\n                    <Form.Control\n                        required\n                        type='text'\n                        placeholder='Ingresa tu direccion'\n                        value={address ? address : ''}\n                        onChange={(e) => setAddress(e.target.value) /*Obteniendo los datos*/}\n                    >\n                    </Form.Control>\n                </Form.Group>\n\n                <Form.Group controlId='city'>\n                    <Form.Label>Ciudad</Form.Label>\n                    <Form.Control\n                        required\n                        type='text'\n                        placeholder='Ingresa tu ciudad'\n                        value={city ? city : ''}\n                        onChange={(e) => setCity(e.target.value)}\n                    >\n                    </Form.Control>\n                </Form.Group>\n\n                <Form.Group controlId='postalCode'>\n                    <Form.Label>Código Postal</Form.Label>\n                    <Form.Control\n                        required\n                        type='text'\n                        placeholder='Ingresa tu codigo postal'\n                        value={postalCode ? postalCode : ''}\n                        onChange={(e) => setPostalCode(e.target.value)}\n                    >\n                    </Form.Control>\n                </Form.Group>\n\n                <Form.Group controlId='country'>\n                    <Form.Label>País</Form.Label>\n                    <Form.Control\n                        required\n                        type='text'\n                        placeholder='Ingresa tu pais'\n                        value={country ? country : ''}\n                        onChange={(e) => setCountry(e.target.value)}\n                    >\n                    </Form.Control>\n                </Form.Group>\n\n                <Button type='submit' variant='primary' /*Boton para subir los datos*/>\n                    Continuar\n                </Button>\n            </Form>\n        </FormContainer>\n    )\n}\n\nexport default ShippingScreen\n","/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/screens/ProfileScreen.js",["208","209"],"//Paul Hernandez y Vianey Martinez\nimport React, { useState, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { Form, Button, Row, Col, Table } from 'react-bootstrap'\nimport { LinkContainer } from 'react-router-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport { getUserDetails, updateUserProfile } from '../actions/userActions'\nimport { USER_UPDATE_PROFILE_RESET } from '../constants/userConstants'\nimport { listMyOrders } from '../actions/orderActions'\n\nfunction ProfileScreen({ history }) {\n    /*Perfil de los usuarios*/\n\n    const [name, setName] = useState('')\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n    const [confirmPassword, setConfirmPassword] = useState('')\n    const [message, setMessage] = useState('')\n\n    const dispatch = useDispatch()\n\n    const userDetails = useSelector(state => state.userDetails)\n    const { error, loading, user } = userDetails\n\n    const userLogin = useSelector(state => state.userLogin)\n    const { userInfo } = userLogin\n\n    const userUpdateProfile = useSelector(state => state.userUpdateProfile)\n    const { success } = userUpdateProfile\n\n    const orderListMy = useSelector(state => state.orderListMy)\n    const { loading: loadingOrders, error: errorOrders, orders } = orderListMy\n\n\n/*Verificar el inicio de sesion y habilitando la opción de perfil*/\n    useEffect(() => {\n        if (!userInfo) {\n            history.push('/login')\n        } else {\n            if (!user || !user.name || success || userInfo._id !== user._id) {\n                dispatch({ type: USER_UPDATE_PROFILE_RESET })\n                dispatch(getUserDetails('profile'))\n                dispatch(listMyOrders())\n            } else {\n                setName(user.name)\n                setEmail(user.email)\n            }\n        }\n    }, [dispatch, history, userInfo, user, success])\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n\n        if (password != confirmPassword) {\n            setMessage('Passwords do not match')\n        } else {\n            dispatch(updateUserProfile({\n                'id': user._id,\n                'name': name,\n                'email': email,\n                'password': password\n            }))\n            setMessage('')\n        }\n\n    }\n    return ( /*Formulario de datos del perfil*/\n        <Row>\n            \n            <Col xs={3}>\n                <h2>Perfil</h2>\n\n                {message && <Message variant='danger'>{message}</Message>}\n                {error && <Message variant='danger'>{error}</Message>}\n                {loading && <Loader />}\n                <Form onSubmit={submitHandler}>\n                    <Form.Group controlId='name'>\n                        <Form.Label>Nombre</Form.Label>\n                        <Form.Control\n                            required\n                            type='name'\n                            placeholder='Enter name'\n                            value={name}\n                            onChange={(e) => setName(e.target.value)}\n                        >\n                        </Form.Control>\n                    </Form.Group>\n\n                    <Form.Group controlId='email'>\n                        <Form.Label>Correo</Form.Label>\n                        <Form.Control\n                            required\n                            type='email'\n                            placeholder='Ingresa tu correo'\n                            value={email}\n                            onChange={(e) => setEmail(e.target.value)}\n                        >\n                        </Form.Control>\n                    </Form.Group>\n\n                    <Form.Group controlId='password'>\n                        <Form.Label>Contraseña</Form.Label>\n                        <Form.Control\n\n                            type='password'\n                            placeholder='Ingresa tu contraseña'\n                            value={password}\n                            onChange={(e) => setPassword(e.target.value)}\n                        >\n                        </Form.Control>\n                    </Form.Group>\n\n                    <Form.Group controlId='passwordConfirm'>\n                        <Form.Label>Confirmar tu contraseña</Form.Label>\n                        <Form.Control\n\n                            type='password'\n                            placeholder='Confirma tu contraseña'\n                            value={confirmPassword}\n                            onChange={(e) => setConfirmPassword(e.target.value)}\n                        >\n                        </Form.Control>\n                    </Form.Group>\n\n                    <Button type='submit' variant='primary' /*Boton para actualizar datos*/> \n                        Actualiza tu perfil\n                </Button>\n\n                </Form>\n            </Col>\n\n            <Col xs={9} /*Datos sobre las ordenes del usuario*/>\n                <h2>My Ordenes</h2>\n                {loadingOrders ? (\n                    <Loader />\n                ) : errorOrders ? (\n                    <Message variant='danger'>{errorOrders}</Message>\n                ) : (\n                            <Table striped responsive className='table-sm'>\n                                <thead>\n                                    <tr>\n                                        <th>ID</th>\n                                        <th>Fecha</th>\n                                        <th>Total</th>\n                                        <th>Pagado</th>\n                                        <th>Recibido</th>\n                                        <th></th>\n                                    </tr>\n                                </thead>\n\n                                <tbody>\n                                    {orders.map(order => (\n                                        <tr key={order._id}>\n                                            <td>{order._id}</td>\n                                            <td>{order.createdAt.substring(0, 10)}</td>\n                                            <td>${order.totalPrice}</td>\n                                            <td>{order.isPaid ? order.paidAt.substring(0, 10) : (\n                                                <i className='fas fa-times' style={{ color: 'red' }}></i>\n                                            )}</td>\n                                            <td>\n                                                <LinkContainer to={`/order/${order._id}`}>\n                                                    <Button className='btn-sm'>Detalles</Button>\n                                                </LinkContainer>\n                                            </td>\n                                        </tr>\n                                    ))}\n                                </tbody>\n                            </Table>\n                        )}\n            </Col>\n        </Row>\n    )\n}\n\nexport default ProfileScreen","/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/screens/ProductScreen.js",["210"],"//Paul Hernandez\nimport React, { useState, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Link } from 'react-router-dom'\nimport { Row, Col, Image, ListGroup, Button, Card, Form } from 'react-bootstrap'\nimport Rating from '../components/Rating'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport { listProductDetails, createProductReview } from '../actions/productActions'\nimport { PRODUCT_CREATE_REVIEW_RESET } from '../constants/productConstants'\n\n/*Panatalla de un producto en especifico*/\n\nfunction ProductScreen({ match, history }) {\n    const [qty, setQty] = useState(1)\n    const [rating, setRating] = useState(0)\n    const [comment, setComment] = useState('')\n\n    const dispatch = useDispatch()\n\n    const productDetails = useSelector(state => state.productDetails)\n    const { loading, error, product } = productDetails\n\n    const userLogin = useSelector(state => state.userLogin)\n    const { userInfo } = userLogin\n\n    const productReviewCreate = useSelector(state => state.productReviewCreate)\n    const {\n        loading: loadingProductReview,\n        error: errorProductReview,\n        success: successProductReview,\n    } = productReviewCreate\n\n/*Verificar reseñas*/\n    useEffect(() => {\n        if (successProductReview) {\n            setRating(0)\n            setComment('')\n            dispatch({ type: PRODUCT_CREATE_REVIEW_RESET })\n        }\n\n        dispatch(listProductDetails(match.params.id))\n\n    }, [dispatch, match, successProductReview])\n\n    const addToCartHandler = () => {\n        history.push(`/cart/${match.params.id}?qty=${qty}`)\n    }\n/*Subir reseñas*/\n    const submitHandler = (e) => {\n        e.preventDefault()\n        dispatch(createProductReview(\n            match.params.id, {\n            rating,\n            comment\n        }\n        ))\n    }\n\n    return (\n        <div /*Regresar a pagina de incio*/>\n            <Link to='/' className='btn btn-light my-3'>Regresar</Link >\n            {loading ?\n                <Loader />\n                : error\n                    ? <Message variant='danger'>{error}</Message>\n                    : ( /*Mensaje de error en caso de algun fallo*/\n                        <div>\n                            <Row>\n                                <Col xs={6}>\n                                    <Image src={product.image} alt={product.name} fluid />\n                                </Col>\n\n\n                                <Col xs={3} /*Datos del producto elegido*/>\n                                    <ListGroup variant=\"flush\">\n                                        <ListGroup.Item>\n                                            <h3>{product.name}</h3>\n                                        </ListGroup.Item>\n\n                                        <ListGroup.Item>\n                                            <Rating value={product.rating} text={`${product.numReviews} reviews`} color={'#f8e825'} />\n                                        </ListGroup.Item>\n\n                                        <ListGroup.Item>\n                                            Precio: ${product.price}\n                                        </ListGroup.Item>\n\n                                        <ListGroup.Item>\n                                            Descripción: {product.description}\n                                        </ListGroup.Item>\n                                    </ListGroup>\n                                </Col>\n\n\n                                <Col xs={3}  /*Datos del producto elegido*/>\n                                    <Card>\n                                        <ListGroup variant='flush'>\n                                            <ListGroup.Item>\n                                                <Row>\n                                                    <Col>Precio:</Col>\n                                                    <Col>\n                                                        <strong>${product.price}</strong>\n                                                    </Col>\n                                                </Row>\n                                            </ListGroup.Item>\n                                            <ListGroup.Item>\n                                                <Row>\n                                                    <Col>En existencia:</Col>\n                                                    <Col /*Verificar cantidad*/>\n                                                        {product.countInStock > 0 ? '   En Stock' : 'Fuera de Stock'}\n                                                    </Col>\n                                                </Row>\n                                            </ListGroup.Item>\n\n                                            {product.countInStock > 0 && (\n                                                <ListGroup.Item>\n                                                    <Row>\n                                                        <Col>Cant</Col>\n                                                        <Col xs='auto' className='my-1'>\n                                                            <Form.Control\n                                                                as=\"select\"\n                                                                value={qty}\n                                                                onChange={(e) => setQty(e.target.value)}\n                                                            >\n                                                                {\n\n                                                                    [...Array(product.countInStock).keys()].map((x) => (\n                                                                        <option key={x + 1} value={x + 1}>\n                                                                            {x + 1}\n                                                                        </option>\n                                                                    ))\n                                                                }\n\n                                                            </Form.Control>\n                                                        </Col>\n                                                    </Row>\n                                                </ListGroup.Item>\n                                            )}\n\n\n                                            <ListGroup.Item>\n                                                <Button /*Boton para agrgar al carrito, envio de paramentros*/\n                                                    onClick={addToCartHandler}\n                                                    className='btn-block'\n                                                    disabled={product.countInStock == 0}\n                                                    type='button'>\n                                                    Agregar al carrito\n                                                </Button>\n                                            </ListGroup.Item>\n                                        </ListGroup>\n                                    </Card>\n                                </Col>\n                            </Row>\n\n                            <Row>\n                                <Col xs={6}>\n                                    <h4>Reseñas</h4>\n                                    {product.reviews.length === 0 && <Message variant='info'>No hay reseñas</Message> /*Verifica si hay reseñas*/}\n\n                                    <ListGroup variant='flush'>\n                                        {product.reviews.map((review) => (\n                                            <ListGroup.Item key={review._id}>\n                                                <strong>{review.name}</strong>\n                                                <Rating value={review.rating} color='#f8e825' />\n                                                <p>{review.createdAt.substring(0, 10)}</p>\n                                                <p>{review.comment}</p>\n                                            </ListGroup.Item>\n                                        ))}\n\n                                        <ListGroup.Item /*Funcion para escribir una reseña*/>\n                                            <h4>Escribe una reseña</h4>\n\n                                            {loadingProductReview && <Loader />}\n                                            {successProductReview && <Message variant='success'>Se ha subido tu reseña</Message>}\n                                            {errorProductReview && <Message variant='danger'>{errorProductReview}</Message>}\n\n                                            {userInfo ? (\n                                                <Form onSubmit={submitHandler} /*Funcion para calificar el producto, valores para calificar*/>\n                                                    <Form.Group controlId='rating'>\n                                                        <Form.Label>Rating</Form.Label>\n                                                        <Form.Control\n                                                            as='select'\n                                                            value={rating}\n                                                            onChange={(e) => setRating(e.target.value)}\n                                                        > \n                                                            <option value=''>Select...</option >\n                                                            <option value='1'>1 - Bastante malo</option>\n                                                            <option value='2'>2 - Malo</option>\n                                                            <option value='3'>3 - Meh</option>\n                                                            <option value='4'>4 - Bien</option>\n                                                            <option value='5'>5 - Excelente</option>\n                                                        </Form.Control>\n                                                    </Form.Group>\n\n                                                    <Form.Group controlId='comment'>\n                                                        <Form.Label>Reseña</Form.Label>\n                                                        <Form.Control\n                                                            as='textarea'\n                                                            row='5'\n                                                            value={comment}\n                                                            onChange={(e) => setComment(e.target.value)}\n                                                        ></Form.Control>\n                                                    </Form.Group>\n\n                                                    <Button /*Boton para publcar reseña*/\n                                                        disabled={loadingProductReview}\n                                                        type='submit'\n                                                        variant='primary'\n                                                    >\n                                                        Publicar\n                                                    </Button>\n\n                                                </Form>\n                                            ) : ( /*Mensaje en caso de que no haya iicado sesion*/\n                                                    <Message variant='info'>Necesitas <Link to='/login'>iniciar sesión </Link>para publicar reseñas</Message>\n                                                )}\n                                        </ListGroup.Item>\n                                    </ListGroup>\n                                </Col>\n                            </Row>\n                        </div>\n                    )\n\n            }\n\n\n        </div >\n    )\n}\n\nexport default ProductScreen\n","/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/screens/UserEditScreen.js",["211"],"//Vianey Martinez \n\nimport React, { useState, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { Form, Button } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport FormContainer from '../components/FormContainer'\nimport { getUserDetails, updateUser } from '../actions/userActions'\nimport { USER_UPDATE_RESET } from '../constants/userConstants'\n\nfunction UserEditScreen({ match, history }) {/*Editar usuarios, pagina para admin*/\n\n    const userId = match.params.id\n\n    const [name, setName] = useState('')\n    const [email, setEmail] = useState('')\n    const [isAdmin, setIsAdmin] = useState(false)\n\n    const dispatch = useDispatch()\n\n    const userDetails = useSelector(state => state.userDetails)\n    const { error, loading, user } = userDetails\n\n    const userUpdate = useSelector(state => state.userUpdate)\n    const { error: errorUpdate, loading: loadingUpdate, success: successUpdate } = userUpdate\n\n    useEffect(() => { /*Verificar cuenta administrador/staff*/\n\n        if (successUpdate) { \n            dispatch({ type: USER_UPDATE_RESET })\n            history.push('/admin/userlist')\n        } else {\n\n            if (!user.name || user._id !== Number(userId)) {\n                dispatch(getUserDetails(userId))\n            } else {\n                setName(user.name)\n                setEmail(user.email)\n                setIsAdmin(user.isAdmin)\n            }\n        }\n\n    }, [user, userId, successUpdate, history])\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        dispatch(updateUser({ _id: user._id, name, email, isAdmin }))\n    }\n\n    return (\n        <div>\n            <Link to='/admin/userlist' /*Formulario para editar un usuario*/>\n                Volver\n            </Link>\n\n            <FormContainer>\n                <h1>Editar info de Usuario</h1>\n                {loadingUpdate && <Loader />}\n                {errorUpdate && <Message variant='danger'>{errorUpdate}</Message>}\n\n                {loading ? <Loader /> : error ? <Message variant='danger'>{error}</Message>\n                    : (\n                        <Form onSubmit={submitHandler}>\n\n                            <Form.Group controlId='name'>\n                                <Form.Label>Nombre</Form.Label>\n                                <Form.Control\n\n                                    type='name'\n                                    placeholder='Ingresa tu nombre'\n                                    value={name}\n                                    onChange={(e) => setName(e.target.value)}\n                                >\n                                </Form.Control>\n                            </Form.Group>\n\n                            <Form.Group controlId='email'>\n                                <Form.Label>Email </Form.Label>\n                                <Form.Control\n                                    type='email'\n                                    placeholder='Ingresa tu correo'\n                                    value={email}\n                                    onChange={(e) => setEmail(e.target.value)}\n                                >\n                                </Form.Control>\n                            </Form.Group>\n\n                            <Form.Group controlId='isadmin'>\n                                <Form.Check\n                                    type='checkbox'\n                                    label='Is Admin'\n                                    checked={isAdmin}\n                                    onChange={(e) => setIsAdmin(e.target.checked)}\n                                >\n                                </Form.Check>\n                            </Form.Group>\n\n                            <Button type='submit' variant='primary' /*Boton para actualizar*/>\n                                Actualizar\n                        </Button>\n\n                        </Form>\n                    )}\n\n            </FormContainer >\n        </div>\n\n    )\n}\n\nexport default UserEditScreen","/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/screens/PlaceOrderScreen.js",["212","213","214"],"//Paul Hernandez\nimport React, { useState, useEffect } from 'react'\nimport { Button, Row, Col, ListGroup, Image, Card } from 'react-bootstrap'\nimport { Link } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Message from '../components/Message'\nimport CheckoutSteps from '../components/CheckoutSteps'\nimport { createOrder } from '../actions/orderActions'\nimport { ORDER_CREATE_RESET } from '../constants/orderConstants'\nimport { PayPalButton } from \"react-paypal-button-v2\";\nfunction PlaceOrderScreen({ history }) {\n\n    const orderCreate = useSelector(state => state.orderCreate)\n    const { order, error, success } = orderCreate\n\n    const dispatch = useDispatch()\n\n    const cart = useSelector(state => state.cart)\n\n    cart.itemsPrice = cart.cartItems.reduce((acc, item) => acc + item.price * item.qty, 0).toFixed(2)\n    cart.shippingPrice = (cart.itemsPrice > 100 ? 0 : 10).toFixed(2)\n    cart.taxPrice = Number((0.082) * cart.itemsPrice).toFixed(2)\n\n    cart.totalPrice = (Number(cart.itemsPrice) + Number(cart.shippingPrice) + Number(cart.taxPrice)).toFixed(2)\n\n/*Verificar pago*/\n    if (!cart.paymentMethod) {\n        history.push('/payment')\n    }\n\n\n    useEffect(() => {\n        if (success) {\n            history.push(`/order/${order._id}`)\n            dispatch({ type: ORDER_CREATE_RESET })\n        }\n    }, [success, history])\n\n\n    /*Datos de la orden*/\n    const placeOrder = () => {\n        dispatch(createOrder({\n            orderItems: cart.cartItems,\n            shippingAddress: cart.shippingAddress,\n            paymentMethod: cart.paymentMethod,\n            itemsPrice: cart.itemsPrice,\n            shippingPrice: cart.shippingPrice,\n            taxPrice: cart.taxPrice,\n            totalPrice: cart.totalPrice,\n        }))\n    }\n\n    return (\n        <div>\n            <CheckoutSteps step1 step2 step3 step4 />\n            <Row>\n                <Col xs={8}>\n                    <ListGroup variant='flush'>\n                        <ListGroup.Item>\n                            <h2>Envío</h2>\n\n                            <p /*Mostrando los datos de la orden en pantalla*/> \n                                <strong>Información de envío: </strong>\n                                {cart.shippingAddress.address},  {cart.shippingAddress.city}\n                                {'  '}\n                                {cart.shippingAddress.postalCode},\n                                {'  '}\n                                {cart.shippingAddress.country}\n                            </p>\n                        </ListGroup.Item>\n\n                        <ListGroup.Item /*Mostrando el metodo de pago*/>\n                            <h2>Método de pago</h2>\n                            <p>\n                                <strong>Método seleccionado: </strong>\n                                {cart.paymentMethod}\n                            </p>\n                        </ListGroup.Item>\n\n                        <ListGroup.Item /*Mostrando los productos de la orden*/>\n                            <h2>Artículos de la orden</h2>\n                            {cart.cartItems.length === 0 ? <Message variant='info'>\n                                Tu carrito está vacío\n                            </Message> : (\n                                    <ListGroup variant='flush'>\n                                        {cart.cartItems.map((item, index) => (\n                                            <ListGroup.Item key={index}>\n                                                <Row>\n                                                    <Col md={1}>\n                                                        <Image src={item.image} alt={item.name} fluid rounded />\n                                                    </Col>\n\n                                                    <Col>\n                                                        <Link to={`/product/${item.product}`}>{item.name}</Link>\n                                                    </Col>\n\n                                                    <Col md={4}>\n                                                        {item.qty} X ${item.price} = ${(item.qty * item.price).toFixed(2)}\n                                                    </Col>\n                                                </Row>\n                                            </ListGroup.Item>\n                                        ))}\n                                    </ListGroup>\n                                )}\n                        </ListGroup.Item>\n\n                    </ListGroup>\n\n                </Col>\n\n                <Col xs={4}>\n                    <Card       /*Información de el envio*/>\n                        <ListGroup variant='flush'>\n                            <ListGroup.Item>\n                                <h2>Información del pedido</h2>\n                            </ListGroup.Item>\n\n                            <ListGroup.Item>\n                                <Row>\n                                    <Col>Artículos:</Col>\n                                    <Col>${cart.itemsPrice}</Col>\n                                </Row>\n                            </ListGroup.Item>\n\n                            <ListGroup.Item>\n                                <Row>\n                                    <Col>Envío:</Col>\n                                    <Col>${cart.shippingPrice}</Col>\n                                </Row>\n                            </ListGroup.Item>\n\n                            <ListGroup.Item>\n                                <Row>\n                                    <Col>Impuesto:</Col>\n                                    <Col>${cart.taxPrice}</Col>\n                                </Row>\n                            </ListGroup.Item>\n\n                            <ListGroup.Item>\n                                <Row>\n                                    <Col>Total:</Col>\n                                    <Col>${cart.totalPrice}</Col>\n                                </Row>\n                            </ListGroup.Item>\n\n\n                            <ListGroup.Item>\n                                {error && <Message variant='danger'>{error}</Message>}\n                            </ListGroup.Item>\n\n                            <ListGroup.Item>\n                                <Button\n                                 type='button'\n                                    className='btn-block'\n                                    disabled={cart.cartItems === 0}\n                                    onClick={placeOrder}\n                                >\n                                    Confirmar orden\n                                </Button>\n                            </ListGroup.Item>\n                \n\n                        </ListGroup>           \n                    </Card>\n                </Col>\n            </Row>\n        </div>\n    )\n}\n\nexport default PlaceOrderScreen\n","/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/screens/OrderScreen.js",["215"],"//Paul Hernandez y Vianey Martinez \nimport React, { useState, useEffect } from 'react'\nimport { Button, Row, Col, ListGroup, Image, Card } from 'react-bootstrap'\nimport { Link } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { PayPalButton } from 'react-paypal-button-v2'\nimport Message from '../components/Message'\nimport Loader from '../components/Loader'\nimport { getOrderDetails, payOrder, deliverOrder } from '../actions/orderActions'\nimport { ORDER_PAY_RESET, ORDER_DELIVER_RESET } from '../constants/orderConstants'\n\nfunction OrderScreen({ match, history }) {\n    const orderId = match.params.id\n    const dispatch = useDispatch()\n/*Constantes que se usaran*/\n\n    const [sdkReady, setSdkReady] = useState(false)\n\n    const orderDetails = useSelector(state => state.orderDetails)\n    const { order, error, loading } = orderDetails\n\n    const orderPay = useSelector(state => state.orderPay)\n    const { loading: loadingPay, success: successPay } = orderPay\n\n    const orderDeliver = useSelector(state => state.orderDeliver)\n    const { loading: loadingDeliver, success: successDeliver } = orderDeliver\n\n    const userLogin = useSelector(state => state.userLogin)\n    const { userInfo } = userLogin\n\n\n    if (!loading && !error) {\n        order.itemsPrice = order.orderItems.reduce((acc, item) => acc + item.price * item.qty, 0).toFixed(2)\n    }\n\n/*Conexión con paypal*/\n    const addPayPalScript = () => {\n        const script = document.createElement('script')\n        script.type = 'text/javascript'\n        script.src = 'https://www.paypal.com/sdk/js?client-id=AeetpAe5qdHU2LnDoKjcw-PWtDJGA2RCGAAQFupjPNuTAclwdayUODEkIf90apRdw9N1_FbrBTjE34U1'\n        script.async = true\n        script.onload = () => {\n            setSdkReady(true)\n        }\n        document.body.appendChild(script)\n    }\n\n/*Verificar si ha iniciado sesion*/\n    useEffect(() => {\n\n        if (!userInfo) {\n            history.push('/login')\n        }\n\n        if (!order || successPay || order._id !== Number(orderId) || successDeliver) {\n            dispatch({ type: ORDER_PAY_RESET })\n            dispatch({ type: ORDER_DELIVER_RESET })\n/*Llamando a los datos de la orden */\n            dispatch(getOrderDetails(orderId))\n        } else if (!order.isPaid) {\n            if (!window.paypal) {\n                addPayPalScript()\n            } else {\n                setSdkReady(true)\n            }\n        }\n    }, [dispatch, order, orderId, successPay, successDeliver])\n\n\n    const successPaymentHandler = (paymentResult) => {\n        dispatch(payOrder(orderId, paymentResult))\n    }\n\n    const deliverHandler = () => {\n        dispatch(deliverOrder(order))\n    }\n\n    return loading ? (\n        <Loader />\n    ) : error ? (\n        <Message variant='danger'>{error}</Message>\n    ) : (\n                <div>\n                    <h1>Order: {order.Id}</h1>\n                    <Row>\n                        <Col xs={8}>\n                            <ListGroup variant='flush'>\n                                <ListGroup.Item /*Datos de la orden*/> \n                                    <h2>Envío </h2> \n                                    <p><strong>Nombre: </strong> {order.user.name}</p> \n                                    <p><strong>Email: </strong><a href={`mailto:${order.user.email}`}>{order.user.email}</a></p>\n                                    <p>\n                                        <strong>Direción de envío: </strong>\n                                        {order.shippingAddress.address},  {order.shippingAddress.city}\n                                        {'  '}\n                                        {order.shippingAddress.postalCode},\n                                {'  '}\n                                        {order.shippingAddress.country}\n                                    </p>\n\n                                    {order.isDelivered ? ( /*Verificar si se ha entregado o no*/\n                                        <Message variant='success'>Se entregó  {order.deliveredAt}</Message>\n                                    ) : (\n                                            <Message variant='warning'>No se ha entregado, continue con el proceso de pago</Message>\n                                        )}\n                                </ListGroup.Item>\n\n                                <ListGroup.Item>\n                                    <h2>Método de pago</h2>\n                                    <p>\n                                        <strong>Método: </strong>\n                                        {order.paymentMethod}\n                                    </p>\n                                    {order.isPaid ? (       /*Verificando el estado del pago*/\n                                        <Message variant='success'>Pagado {order.paidAt}</Message>\n                                    ) : (\n                                            <Message variant='warning'>No ha pagado</Message>\n                                        )}\n\n                                </ListGroup.Item>\n\n                                <ListGroup.Item              /*Llamando a los datos de la orden*/> \n                                    <h2>Artículos de la orden</h2> \n                                    {order.orderItems.length === 0 ? <Message variant='info'> \n                                        La orden no contiene productos \n                            </Message> : (\n                                            <ListGroup variant='flush'>\n                                                {order.orderItems.map((item, index) => (\n                                                    <ListGroup.Item key={index}>\n                                                        <Row>\n                                                            <Col md={1}>\n                                                                <Image src={item.image} alt={item.name} fluid rounded />\n                                                            </Col>\n\n                                                            <Col>\n                                                                <Link to={`/product/${item.product}`}>{item.name}</Link>\n                                                            </Col>\n\n                                                            <Col md={4}>\n                                                                {item.qty} X ${item.price} = ${(item.qty * item.price).toFixed(2)}\n                                                            </Col>\n                                                        </Row>\n                                                    </ListGroup.Item>\n                                                ))}\n                                            </ListGroup>\n                                        )}\n                                </ListGroup.Item>\n\n                            </ListGroup>\n\n                        </Col>\n\n                        <Col xs={4}>\n                            <Card                   /*Información del pedido*/>\n                                <ListGroup variant='flush'>\n                                    <ListGroup.Item>\n                                        <h2>Información del pedido</h2>\n                                    </ListGroup.Item>\n\n                                    <ListGroup.Item>\n                                        <Row>\n                                            <Col>Artículos:</Col>\n                                            <Col>${order.itemsPrice}</Col>\n                                        </Row>\n                                    </ListGroup.Item>\n\n                                    <ListGroup.Item>\n                                        <Row>\n                                            <Col>Envío:</Col>\n                                            <Col>${order.shippingPrice}</Col>\n                                        </Row>\n                                    </ListGroup.Item>\n\n                                    <ListGroup.Item>\n                                        <Row>\n                                            <Col>Impuesto:</Col>\n                                            <Col>${order.taxPrice}</Col>\n                                        </Row>\n                                    </ListGroup.Item>\n\n                                    <ListGroup.Item>\n                                        <Row>\n                                            <Col>Total:</Col>\n                                            <Col>${order.totalPrice}</Col>\n                                        </Row>\n                                    </ListGroup.Item>\n\n\n                                    {!order.isPaid && (\n                                        <ListGroup.Item>\n                                            {loadingPay && <Loader />}\n\n                                            {!sdkReady ? (\n                                                <Loader />\n                                            ) : (\n                                                    <PayPalButton /*LLamando a la api de paypal*/\n                                                        amount={order.totalPrice}\n                                                        onSuccess={successPaymentHandler}\n                                                    />\n                                                )}\n                                        </ListGroup.Item>\n                                    )}\n                                </ListGroup> \n                                {loadingDeliver && <Loader />}\n                                {userInfo && userInfo.isAdmin && order.isPaid && !order.isDelivered && (        /*Se valida si se ha entregado la orden*/\n                                    <ListGroup.Item>\n                                        <Button\n                                            type='button'\n                                            className='btn btn-block'\n                                            onClick={deliverHandler}\n                                        >\n                                            Marcar como entregado\n                                        </Button>\n                                    </ListGroup.Item>\n                                )}\n                            </Card>\n                        </Col>\n                    </Row>\n                </div>\n            )\n}\n\nexport default OrderScreen\n","/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/screens/UserListScreen.js",["216"],"//Vianey Martinez \nimport React, { useState, useEffect } from 'react'\nimport { LinkContainer } from 'react-router-bootstrap'\nimport { Table, Button } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport { listUsers, deleteUser } from '../actions/userActions'\n\nfunction UserListScreen({ history }) {\n\n    const dispatch = useDispatch()\n\n    const userList = useSelector(state => state.userList)\n    const { loading, error, users } = userList\n\n    const userLogin = useSelector(state => state.userLogin)\n    const { userInfo } = userLogin\n\n    const userDelete = useSelector(state => state.userDelete)\n    const { success: successDelete } = userDelete\n\n\n    useEffect(() => { /*Verificar que se haya iniciado sesion*/\n        if (userInfo && userInfo.isAdmin) {\n            dispatch(listUsers())\n        } else {\n            history.push('/login')\n        }\n\n    }, [dispatch, history, successDelete, userInfo])\n\n\n    const deleteHandler = (id) => {\n\n        if (window.confirm('Estas seguro que quieres eliminar a el usuario?')) { /*Mensaje de confirmación*/\n            dispatch(deleteUser(id))\n        }\n    }\n\n    return (\n        <div>\n            <h1>Users</h1>\n            {loading\n                ? (<Loader />)\n                : error\n                    ? (<Message variant='danger'>{error}</Message>)\n                    : (\n                        <Table striped bordered hover responsive className='table-sm' /*Mostrar datos de usuario*/>\n                            <thead>\n                                <tr>\n                                    <th>ID</th>\n                                    <th>NAME</th>\n                                    <th>EMAIL</th>\n                                    <th>ADMIN</th>\n                                    <th></th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                {users.map(user => (\n                                    <tr key={user._id}>\n                                        <td>{user._id}</td>\n                                        <td>{user.name}</td>\n                                        <td>{user.email}</td>\n                                        <td>{user.isAdmin ? (\n                                            <i className='fas fa-check' style={{ color: 'green' }}></i>\n                                        ) : (\n                                                <i className='fas fa-times' style={{ color: 'red' }}></i>\n                                            )}</td>\n\n                                        <td>\n                                            <LinkContainer to={`/admin/user/${user._id}/edit`}>\n                                                <Button variant='light' className='btn-sm'>\n                                                    <i className='fas fa-edit'></i>\n                                                </Button>\n                                            </LinkContainer>\n\n                                            <Button variant='danger' className='btn-sm' onClick={() => deleteHandler(user._id) /*Eliminar usuario*/}>\n                                                <i className='fas fa-trash'></i>\n                                            </Button>\n                                        </td>\n                                    </tr>\n                                ))}\n                            </tbody>\n                        </Table>\n                    )}\n        </div>\n    )\n}\n\nexport default UserListScreen\n","/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/screens/ProductListScreen.js",["217"],"//Paul Hernandez\nimport React, { useState, useEffect } from 'react'\nimport { LinkContainer } from 'react-router-bootstrap'\nimport { Table, Button, Row, Col } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport Paginate from '../components/Paginate'\nimport { listProducts, deleteProduct, createProduct } from '../actions/productActions'\nimport { PRODUCT_CREATE_RESET } from '../constants/productConstants'\n\nfunction ProductListScreen({ history, match }) {\n\n    /*Mostrando los datos a el admin*/\n    const dispatch = useDispatch()\n\n    const productList = useSelector(state => state.productList)\n    const { loading, error, products, pages, page } = productList\n\n    const productDelete = useSelector(state => state.productDelete)\n    const { loading: loadingDelete, error: errorDelete, success: successDelete } = productDelete\n\n    const productCreate = useSelector(state => state.productCreate)\n    const { loading: loadingCreate, error: errorCreate, success: successCreate, product: createdProduct } = productCreate\n\n\n    const userLogin = useSelector(state => state.userLogin)\n    const { userInfo } = userLogin\n\n    let keyword = history.location.search\n    useEffect(() => {\n        dispatch({ type: PRODUCT_CREATE_RESET })\n\n        /*Verificar si inicio sesion*/\n        if (!userInfo.isAdmin) {\n            history.push('/login')\n        }\n\n        if (successCreate) {\n            history.push(`/admin/product/${createdProduct._id}/edit`)\n        } else {\n            dispatch(listProducts(keyword))\n        }\n\n    }, [dispatch, history, userInfo, successDelete, successCreate, createdProduct, keyword])\n\n\n    const deleteHandler = (id) => {\n\n        if (window.confirm('Are you sure you want to delete this product?')) {\n            dispatch(deleteProduct(id))\n        }\n    }\n\n    const createProductHandler = () => {\n        dispatch(createProduct())\n    }\n\n    return (\n        <div>\n            \n            <Row className='align-items-center'>\n                <Col >\n                    <h1>Productos</h1>\n                </Col>\n\n                <Col className='text-right' /*Boton de crear productos*/>\n                    <Button className='my-3' onClick={createProductHandler}>\n                        <i className='fas fa-plus'></i> Crear productos\n                    </Button>\n                </Col>\n            </Row>\n            \n\n            {loadingDelete && <Loader /> /*Aviso de error al eliminr producto*/} \n            {errorDelete && <Message variant='danger'>{errorDelete}</Message>}\n\n\n            {loadingCreate && <Loader /> /*Aviso de error al crear*/}\n            {errorCreate && <Message variant='danger'>{errorCreate}</Message>}\n\n            {loading\n                ? (<Loader />)\n                : error\n                    ? (<Message variant='danger'>{error}</Message>)\n                    : (\n                        <div>\n                            <Table striped bordered hover responsive className='table-sm'>\n                                <thead>\n                                    <tr /*Datos del producto*/> \n                                        <th>ID</th>\n                                        <th>NAME</th>\n                                        <th>PRICE</th>\n                                        <th>CATEGORY</th>\n                                        <th>BRAND</th>\n                                        <th></th>\n                                    </tr>\n                                </thead>\n\n                                <tbody>\n                                    {products.map(product => ( /*Obteniendo datos*/\n                                        <tr key={product._id}>\n                                            <td>{product._id}</td>\n                                            <td>{product.name}</td>\n                                            <td>${product.price}</td>\n                                            <td>{product.category}</td>\n                                            <td>{product.brand}</td>\n\n                                            <td>\n                                                <LinkContainer to={`/admin/product/${product._id}/edit`}>\n                                                    <Button variant='light' className='btn-sm'>\n                                                        <i className='fas fa-edit'></i>\n                                                    </Button>\n                                                </LinkContainer>\n\n                                                <Button variant='danger' className='btn-sm' onClick={() => deleteHandler(product._id)}>\n                                                    <i className='fas fa-trash'></i>\n                                                </Button>\n                                            </td>\n                                        </tr>\n                                    ))}\n                                </tbody>\n                            </Table>\n                            <Paginate pages={pages} page={page} isAdmin={true} />\n                        </div>\n                    )}\n        </div>\n    )\n}\n\nexport default ProductListScreen","/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/screens/ProductEditScreen.js",[],"/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/screens/OrderListScreen.js",["218"],"//Paul Hernandez\nimport React, { useState, useEffect } from 'react'\nimport { LinkContainer } from 'react-router-bootstrap'\nimport { Table, Button } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport { listOrders } from '../actions/orderActions'\n\nfunction OrderListScreen({ history }) {\n\n    const dispatch = useDispatch()\n\n    const orderList = useSelector(state => state.orderList)\n    const { loading, error, orders } = orderList\n\n    const userLogin = useSelector(state => state.userLogin)\n    const { userInfo } = userLogin\n\n//Verificar si se ha inicado sesion\n    useEffect(() => {\n        if (userInfo && userInfo.isAdmin) {\n            dispatch(listOrders())\n        } else {\n            history.push('/login')\n        }\n\n    }, [dispatch, history, userInfo])\n\n\n    return (\n        //Muestra la información de una orden, entre ellos los datos del usuario\n        <div>\n            <h1>Ordenes</h1>\n            {loading\n                ? (<Loader />)\n                : error\n                    ? (<Message variant='danger'>{error}</Message>)\n                    : (\n                        <Table striped bordered hover responsive className='table-sm'>\n                            <thead>\n                                <tr>\n                                    <th>ID</th>\n                                    <th>USUARIO</th>\n                                    <th>FECHA</th>\n                                    <th>Total</th>\n                                    <th>PAGADO</th>\n                                    <th>ENTREGADO</th>\n                                    <th></th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {orders.map(order => (//Datos de la orden\n                                    <tr key={order._id}>\n                                        <td>{order._id}</td>\n                                        <td>{order.user && order.user.name}</td>\n                                        <td>{order.createdAt.substring(0, 10)}</td>\n                                        <td>${order.totalPrice}</td>\n\n                                        <td>{order.isPaid ? (/*Verificar pago de la orden*/\n                                            order.paidAt.substring(0, 10)\n                                        ) : (\n                                                <i className='fas fa-times' style={{ color: 'red' }}></i>\n                                            )}\n                                        </td>\n\n                                        <td>{order.isDelivered ? (\n                                            order.deliveredAt.substring(0, 10)\n                                        ) : (\n                                                <i className='fas fa-times' style={{ color: 'red' }}></i>\n                                            )}\n                                        </td>\n\n                                        <td>\n                                            <LinkContainer to={`/order/${order._id}`}/*Boton para los detalles de la orden*/>\n                                                <Button variant='light' className='btn-sm'>\n                                                    Detalles\n                                                </Button>\n                                            </LinkContainer>\n\n                                        </td>\n                                    </tr>\n                                ))}\n                            </tbody>\n                        </Table>\n                    )}\n        </div>\n    )\n}\n\nexport default OrderListScreen","/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/components/Message.js",[],"/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/components/Paginate.js",[],"/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/components/Loader.js",[],"/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/components/Logins.js",["219","220","221","222","223","224","225"],"\n\n\n\nimport React, { useState, useEffect, Component } from 'react'\nconst clientId=\"795948132843-dcfvnj4f58c0jisogn9qfqnsg20hat0f.apps.googleusercontent.com\"\n\nfunction Logins({ }) {\n    const onSuccess=(res)=>{\n        console.log(\"Login succes\",res.profileObj);\n      }\n      const onFailure=(res)=>{\n        console.log(\"Login failed\", res);\n      }\n\n\n    return (\n        <div id=\"signInButton\"> \n        </div>\n    )\n}\n\nexport default Logins","/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/components/Product.js",["226"],"//Paul Hernandez\nimport React from 'react'\nimport { Card, Button } from 'react-bootstrap'\nimport Rating from './Rating'\nimport { Link } from 'react-router-dom'\n\nfunction Product({ product }) { /*Mostrar productos en la pagina del e-commerce*/\n    return (\n        \n    \n        <Card className=\"my-3 p-3 rounded\">\n            <Link to={`/product/${product._id}`}>\n                <Card.Img src={product.image} />\n            </Link>\n\n            <Card.Body>\n                <Link to={`/product/${product._id}`}>\n                    <Card.Title as=\"div\">\n                        <strong>{product.name}</strong>\n                    </Card.Title>\n                </Link>\n\n                <Card.Text as=\"div\">\n                    <div className=\"my-3\">\n                        <Rating value={product.rating} text={`${product.numReviews} reviews`} color={'#f8e825'} />\n                    </div>\n                </Card.Text>\n\n\n                <Card.Text as=\"h3\">\n                    ${product.price}\n                    \n                </Card.Text>\n            </Card.Body>\n        </Card>\n    )\n}\n\nexport default Product\n","/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/components/FormContainer.js",[],"/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/components/SearchBox.js",[],"/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/components/ProductCarousel.js",[],"/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/screens/login.js",["227","228","229","230","231","232","233"],"//Vianey Martinez\n\nimport React, { useState, useEffect, Component } from 'react'\n//Id generado por las credenciales de la api de google\nconst clientId=\"795948132843-dcfvnj4f58c0jisogn9qfqnsg20hat0f.apps.googleusercontent.com\"\n\nfunction Login({ }) {\n    const onSuccess=(res)=>{\n        console.log(\"Login succes\",res.profileObj);\n      }\n      const onFailure=(res)=>{\n        console.log(\"Login failed\", res);\n      }\n\n      //Recabae los datos para el login se usa el componente de google\n\n    return (\n        <div id=\"signInButton\"> \n        </div>\n    )\n}\n\nexport default Login","/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/components/CheckoutSteps.js",[],"/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/constants/cartConstants.js",[],"/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/constants/userConstants.js",[],"/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/constants/productConstants.js",[],"/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/constants/orderConstants.js",[],"/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/actions/cartActions.js",[],"/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/actions/userActions.js",["234"],"//Vianey Martinez \n//Importando todas las funciones de los usuarios\nimport axios from 'axios'\nimport {\n    USER_LOGIN_REQUEST,\n    USER_LOGIN_SUCCESS,\n    USER_LOGIN_FAIL,\n\n    USER_LOGOUT,\n\n    USER_REGISTER_REQUEST,\n    USER_REGISTER_SUCCESS,\n    USER_REGISTER_FAIL,\n\n    USER_DETAILS_REQUEST,\n    USER_DETAILS_SUCCESS,\n    USER_DETAILS_FAIL,\n    USER_DETAILS_RESET,\n\n    USER_UPDATE_PROFILE_REQUEST,\n    USER_UPDATE_PROFILE_SUCCESS,\n    USER_UPDATE_PROFILE_FAIL,\n    USER_UPDATE_PROFILE_RESET,\n\n    USER_LIST_REQUEST,\n    USER_LIST_SUCCESS,\n    USER_LIST_FAIL,\n    USER_LIST_RESET,\n\n    USER_DELETE_REQUEST,\n    USER_DELETE_SUCCESS,\n    USER_DELETE_FAIL,\n\n    USER_UPDATE_REQUEST,\n    USER_UPDATE_SUCCESS,\n    USER_UPDATE_FAIL,\n\n} from '../constants/userConstants'\n\nimport { ORDER_LIST_MY_RESET } from '../constants/orderConstants'\n\nexport const login = (email, password) => async (dispatch) => { //Función para el inicio de sesión\n    try {\n        dispatch({\n            type: USER_LOGIN_REQUEST\n        })\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json'\n            }\n        }\n\n        const { data } = await axios.post(\n            '/api/users/login/',\n            { 'username': email, 'password': password },\n            config\n        )\n\n        dispatch({\n            type: USER_LOGIN_SUCCESS,\n            payload: data\n        })\n\n        localStorage.setItem('userInfo', JSON.stringify(data))\n\n    } catch (error) {\n        dispatch({\n            type: USER_LOGIN_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\nexport const logout = () => (dispatch) => { //Funcion para cerrar sesión\n    localStorage.removeItem('userInfo')\n    dispatch({ type: USER_LOGOUT })\n    dispatch({ type: USER_DETAILS_RESET })\n    dispatch({ type: ORDER_LIST_MY_RESET })\n    dispatch({ type: USER_LIST_RESET })\n}\n\n\nexport const register = (name, email, password) => async (dispatch) => { //Funcion para registrar en la base de datos\n    try {\n        dispatch({\n            type: USER_REGISTER_REQUEST\n        })\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json'\n            }\n        }\n\n        const { data } = await axios.post(\n            '/api/users/register/',\n            { 'name': name, 'email': email, 'password': password },\n            config\n        )\n\n        dispatch({\n            type: USER_REGISTER_SUCCESS,\n            payload: data\n        })\n\n        dispatch({\n            type: USER_LOGIN_SUCCESS,\n            payload: data\n        })\n\n        localStorage.setItem('userInfo', JSON.stringify(data))\n\n    } catch (error) {\n        dispatch({\n            type: USER_REGISTER_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\nexport const getUserDetails = (id) => async (dispatch, getState) => {//Obtener los detalles de usuario de la base de datos\n    try {\n        dispatch({\n            type: USER_DETAILS_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.get(\n            `/api/users/${id}/`,\n            config\n        )\n\n        dispatch({\n            type: USER_DETAILS_SUCCESS,\n            payload: data\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: USER_DETAILS_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\nexport const updateUserProfile = (user) => async (dispatch, getState) => {//Actualizar usuario de la base de datos\n    try {\n        dispatch({\n            type: USER_UPDATE_PROFILE_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.put(\n            `/api/users/profile/update/`,\n            user,\n            config\n        )\n\n        dispatch({\n            type: USER_UPDATE_PROFILE_SUCCESS,\n            payload: data\n        })\n\n        dispatch({\n            type: USER_LOGIN_SUCCESS,\n            payload: data\n        })\n\n        localStorage.setItem('userInfo', JSON.stringify(data))\n\n    } catch (error) {\n        dispatch({\n            type: USER_UPDATE_PROFILE_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\nexport const listUsers = () => async (dispatch, getState) => {//Mostrar lista de usuarios\n    try {\n        dispatch({\n            type: USER_LIST_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.get(\n            `/api/users/`,\n            config\n        )\n\n        dispatch({\n            type: USER_LIST_SUCCESS,\n            payload: data\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: USER_LIST_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\nexport const deleteUser = (id) => async (dispatch, getState) => {//Funcion para eliminar usuarios de ls base de datos\n    try {\n        dispatch({\n            type: USER_DELETE_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.delete(\n            `/api/users/delete/${id}/`,\n            config\n        )\n\n        dispatch({\n            type: USER_DELETE_SUCCESS,\n            payload: data\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: USER_DELETE_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\nexport const updateUser = (user) => async (dispatch, getState) => {//Funcion para actualizar usuario\n    try {\n        dispatch({\n            type: USER_UPDATE_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.put(\n            `/api/users/update/${user._id}/`,\n            user,\n            config\n        )\n\n        dispatch({\n            type: USER_UPDATE_SUCCESS,\n        })\n\n        dispatch({\n            type: USER_DETAILS_SUCCESS,\n            payload: data\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: USER_UPDATE_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}","/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/actions/productActions.js",["235"],"//Pau Hernandez\n\n//Importando todas las funciones de los productos\nimport axios from 'axios'\nimport {\n    PRODUCT_LIST_REQUEST,\n    PRODUCT_LIST_SUCCESS,\n    PRODUCT_LIST_FAIL,\n\n    PRODUCT_DETAILS_REQUEST,\n    PRODUCT_DETAILS_SUCCESS,\n    PRODUCT_DETAILS_FAIL,\n\n    PRODUCT_DELETE_REQUEST,\n    PRODUCT_DELETE_SUCCESS,\n    PRODUCT_DELETE_FAIL,\n\n    PRODUCT_CREATE_REQUEST,\n    PRODUCT_CREATE_SUCCESS,\n    PRODUCT_CREATE_FAIL,\n\n    PRODUCT_UPDATE_REQUEST,\n    PRODUCT_UPDATE_SUCCESS,\n    PRODUCT_UPDATE_FAIL,\n\n    PRODUCT_CREATE_REVIEW_REQUEST,\n    PRODUCT_CREATE_REVIEW_SUCCESS,\n    PRODUCT_CREATE_REVIEW_FAIL,\n\n\n    PRODUCT_TOP_REQUEST,\n    PRODUCT_TOP_SUCCESS,\n    PRODUCT_TOP_FAIL,\n\n} from '../constants/productConstants'\n\n\nexport const listProducts = (keyword = '') => async (dispatch) => { //llamando a la lista de productos \n    try {\n        dispatch({ type: PRODUCT_LIST_REQUEST })\n\n        const { data } = await axios.get(`/api/products${keyword}`)\n\n        dispatch({\n            type: PRODUCT_LIST_SUCCESS,\n            payload: data\n        })\n\n    } catch (error) {\n        dispatch({\n            type: PRODUCT_LIST_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\nexport const listTopProducts = () => async (dispatch) => {\n    try {\n        dispatch({ type: PRODUCT_TOP_REQUEST })\n\n        const { data } = await axios.get(`/api/products/top/`)\n\n        dispatch({\n            type: PRODUCT_TOP_SUCCESS,\n            payload: data\n        })\n\n    } catch (error) {\n        dispatch({\n            type: PRODUCT_TOP_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\nexport const listProductDetails = (id) => async (dispatch) => { //llamando a la información de detalles de los productos\n    try {\n        dispatch({ type: PRODUCT_DETAILS_REQUEST })\n\n        const { data } = await axios.get(`/api/products/${id}`)\n\n        dispatch({\n            type: PRODUCT_DETAILS_SUCCESS,\n            payload: data\n        })\n\n    } catch (error) {\n        dispatch({\n            type: PRODUCT_DETAILS_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\nexport const deleteProduct = (id) => async (dispatch, getState) => { //Funcion para eliminar productos\n    try {\n        dispatch({\n            type: PRODUCT_DELETE_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.delete(\n            `/api/products/delete/${id}/`,\n            config\n        )\n\n        dispatch({\n            type: PRODUCT_DELETE_SUCCESS,\n        })\n\n\n    } catch (error) {//Mensaje de error\n        dispatch({\n            type: PRODUCT_DELETE_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\n\n\nexport const createProduct = () => async (dispatch, getState) => {//Funcion para crear productos\n    try {\n        dispatch({\n            type: PRODUCT_CREATE_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.post(\n            `/api/products/create/`,\n            {},\n            config\n        )\n        dispatch({\n            type: PRODUCT_CREATE_SUCCESS,\n            payload: data,\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: PRODUCT_CREATE_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\n\nexport const updateProduct = (product) => async (dispatch, getState) => {//Funcion para actualizar productos\n    try {\n        dispatch({\n            type: PRODUCT_UPDATE_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.put(\n            `/api/products/update/${product._id}/`,\n            product,\n            config\n        )\n        dispatch({\n            type: PRODUCT_UPDATE_SUCCESS,\n            payload: data,\n        })\n\n\n        dispatch({\n            type: PRODUCT_DETAILS_SUCCESS,\n            payload: data\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: PRODUCT_UPDATE_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\nexport const createProductReview = (productId, review) => async (dispatch, getState) => {//Funcion para crear review\n    try {\n        dispatch({\n            type: PRODUCT_CREATE_REVIEW_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.post(\n            `/api/products/${productId}/reviews/`,\n            review,\n            config\n        )\n        dispatch({\n            type: PRODUCT_CREATE_REVIEW_SUCCESS,\n            payload: data,\n        })\n\n\n\n    } catch (error) {\n        dispatch({\n            type: PRODUCT_CREATE_REVIEW_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}","/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/actions/orderActions.js",["236","237","238"],"//Paul Hernandez\n//Importando todas las funciones de las ordenes\n\nimport axios from 'axios'\nimport {\n    ORDER_CREATE_REQUEST,\n    ORDER_CREATE_SUCCESS,\n    ORDER_CREATE_FAIL,\n\n    ORDER_DETAILS_REQUEST,\n    ORDER_DETAILS_SUCCESS,\n    ORDER_DETAILS_FAIL,\n\n    ORDER_PAY_REQUEST,\n    ORDER_PAY_SUCCESS,\n    ORDER_PAY_FAIL,\n    ORDER_PAY_RESET,\n\n    ORDER_LIST_MY_REQUEST,\n    ORDER_LIST_MY_SUCCESS,\n    ORDER_LIST_MY_FAIL,\n    ORDER_LIST_MY_RESET,\n\n    ORDER_LIST_REQUEST,\n    ORDER_LIST_SUCCESS,\n    ORDER_LIST_FAIL,\n\n    ORDER_DELIVER_REQUEST,\n    ORDER_DELIVER_SUCCESS,\n    ORDER_DELIVER_FAIL,\n    ORDER_DELIVER_RESET,\n} from '../constants/orderConstants'\n\nimport { CART_CLEAR_ITEMS } from '../constants/cartConstants'\n\n\nexport const createOrder = (order) => async (dispatch, getState) => {  /*Funcion para crear ordenes*/\n    try {\n        dispatch({\n            type: ORDER_CREATE_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo }, /*Enviar datos de inicio de sesion*/\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.post(\n            `/api/orders/add/`,\n            order,\n            config\n        )\n\n        dispatch({\n            type: ORDER_CREATE_SUCCESS,\n            payload: data\n        })\n\n        dispatch({\n            type: CART_CLEAR_ITEMS,\n            payload: data\n        })\n\n        localStorage.removeItem('cartItems')\n\n\n    } catch (error) {\n        dispatch({\n            type: ORDER_CREATE_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\nexport const getOrderDetails = (id) => async (dispatch, getState) => { /*Obteniendo detalles de la orden*/\n    try {\n        dispatch({\n            type: ORDER_DETAILS_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.get(\n            `/api/orders/${id}/`,\n            config\n        )\n\n        dispatch({\n            type: ORDER_DETAILS_SUCCESS,\n            payload: data\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: ORDER_DETAILS_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\n\nexport const payOrder = (id, paymentResult) => async (dispatch, getState) => {//Funcion para la orden del pago\n    try {\n        dispatch({\n            type: ORDER_PAY_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.put(\n            `/api/orders/${id}/pay/`,\n            paymentResult,\n            config\n        )\n\n        dispatch({\n            type: ORDER_PAY_SUCCESS,\n            payload: data\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: ORDER_PAY_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\nexport const deliverOrder = (order) => async (dispatch, getState) => {//Información de orden\n    try {\n        dispatch({\n            type: ORDER_DELIVER_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.put(\n            `/api/orders/${order._id}/deliver/`,\n            {},\n            config\n        )\n\n        dispatch({\n            type: ORDER_DELIVER_SUCCESS,\n            payload: data\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: ORDER_DELIVER_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\n\nexport const listMyOrders = () => async (dispatch, getState) => {//Mostrar la lista de ordenes\n    try {\n        dispatch({\n            type: ORDER_LIST_MY_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.get(\n            `/api/orders/myorders/`,\n            config\n        )\n\n        dispatch({\n            type: ORDER_LIST_MY_SUCCESS,\n            payload: data\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: ORDER_LIST_MY_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\nexport const listOrders = () => async (dispatch, getState) => { //Lista de ordenes\n    try {\n        dispatch({\n            type: ORDER_LIST_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.get(\n            `/api/orders/`,\n            config\n        )\n\n        dispatch({\n            type: ORDER_LIST_SUCCESS,\n            payload: data\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: ORDER_LIST_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}","/home/leningael/Escritorio/proyecto/VETPET-Ecommerce/frontend/src/components/Rating.js",[],{"ruleId":"239","severity":1,"message":"240","line":2,"column":17,"nodeType":"241","messageId":"242","endLine":2,"endColumn":25},{"ruleId":"239","severity":1,"message":"243","line":9,"column":8,"nodeType":"241","messageId":"242","endLine":9,"endColumn":23},{"ruleId":"239","severity":1,"message":"244","line":4,"column":34,"nodeType":"241","messageId":"242","endLine":4,"endColumn":37},{"ruleId":"245","severity":1,"message":"246","line":24,"column":15,"nodeType":"247","endLine":27,"endColumn":16},{"ruleId":"239","severity":1,"message":"248","line":11,"column":8,"nodeType":"241","messageId":"242","endLine":11,"endColumn":14},{"ruleId":"249","severity":1,"message":"250","line":56,"column":47,"nodeType":"251","messageId":"252","endLine":59,"endColumn":41},{"ruleId":"253","severity":1,"message":"254","line":35,"column":22,"nodeType":"255","messageId":"256","endLine":35,"endColumn":24},{"ruleId":"239","severity":1,"message":"257","line":2,"column":27,"nodeType":"241","messageId":"242","endLine":2,"endColumn":36},{"ruleId":"239","severity":1,"message":"257","line":2,"column":27,"nodeType":"241","messageId":"242","endLine":2,"endColumn":36},{"ruleId":"239","severity":1,"message":"258","line":3,"column":10,"nodeType":"241","messageId":"242","endLine":3,"endColumn":14},{"ruleId":"253","severity":1,"message":"254","line":56,"column":22,"nodeType":"255","messageId":"256","endLine":56,"endColumn":24},{"ruleId":"253","severity":1,"message":"259","line":146,"column":84,"nodeType":"255","messageId":"256","endLine":146,"endColumn":86},{"ruleId":"260","severity":1,"message":"261","line":45,"column":8,"nodeType":"262","endLine":45,"endColumn":46,"suggestions":"263"},{"ruleId":"239","severity":1,"message":"240","line":2,"column":17,"nodeType":"241","messageId":"242","endLine":2,"endColumn":25},{"ruleId":"239","severity":1,"message":"264","line":10,"column":10,"nodeType":"241","messageId":"242","endLine":10,"endColumn":22},{"ruleId":"260","severity":1,"message":"265","line":37,"column":8,"nodeType":"262","endLine":37,"endColumn":26,"suggestions":"266"},{"ruleId":"260","severity":1,"message":"267","line":67,"column":8,"nodeType":"262","endLine":67,"endColumn":62,"suggestions":"268"},{"ruleId":"239","severity":1,"message":"240","line":2,"column":17,"nodeType":"241","messageId":"242","endLine":2,"endColumn":25},{"ruleId":"239","severity":1,"message":"240","line":2,"column":17,"nodeType":"241","messageId":"242","endLine":2,"endColumn":25},{"ruleId":"239","severity":1,"message":"240","line":2,"column":17,"nodeType":"241","messageId":"242","endLine":2,"endColumn":25},{"ruleId":"239","severity":1,"message":"240","line":5,"column":17,"nodeType":"241","messageId":"242","endLine":5,"endColumn":25},{"ruleId":"239","severity":1,"message":"257","line":5,"column":27,"nodeType":"241","messageId":"242","endLine":5,"endColumn":36},{"ruleId":"239","severity":1,"message":"269","line":5,"column":38,"nodeType":"241","messageId":"242","endLine":5,"endColumn":47},{"ruleId":"239","severity":1,"message":"270","line":6,"column":7,"nodeType":"241","messageId":"242","endLine":6,"endColumn":15},{"ruleId":"271","severity":1,"message":"272","line":8,"column":17,"nodeType":"273","messageId":"256","endLine":8,"endColumn":20},{"ruleId":"239","severity":1,"message":"274","line":9,"column":11,"nodeType":"241","messageId":"242","endLine":9,"endColumn":20},{"ruleId":"239","severity":1,"message":"275","line":12,"column":13,"nodeType":"241","messageId":"242","endLine":12,"endColumn":22},{"ruleId":"239","severity":1,"message":"276","line":3,"column":16,"nodeType":"241","messageId":"242","endLine":3,"endColumn":22},{"ruleId":"239","severity":1,"message":"240","line":3,"column":17,"nodeType":"241","messageId":"242","endLine":3,"endColumn":25},{"ruleId":"239","severity":1,"message":"257","line":3,"column":27,"nodeType":"241","messageId":"242","endLine":3,"endColumn":36},{"ruleId":"239","severity":1,"message":"269","line":3,"column":38,"nodeType":"241","messageId":"242","endLine":3,"endColumn":47},{"ruleId":"239","severity":1,"message":"270","line":5,"column":7,"nodeType":"241","messageId":"242","endLine":5,"endColumn":15},{"ruleId":"271","severity":1,"message":"272","line":7,"column":16,"nodeType":"273","messageId":"256","endLine":7,"endColumn":19},{"ruleId":"239","severity":1,"message":"274","line":8,"column":11,"nodeType":"241","messageId":"242","endLine":8,"endColumn":20},{"ruleId":"239","severity":1,"message":"275","line":11,"column":13,"nodeType":"241","messageId":"242","endLine":11,"endColumn":22},{"ruleId":"239","severity":1,"message":"277","line":23,"column":5,"nodeType":"241","messageId":"242","endLine":23,"endColumn":30},{"ruleId":"239","severity":1,"message":"278","line":120,"column":17,"nodeType":"241","messageId":"242","endLine":120,"endColumn":21},{"ruleId":"239","severity":1,"message":"279","line":17,"column":5,"nodeType":"241","messageId":"242","endLine":17,"endColumn":20},{"ruleId":"239","severity":1,"message":"280","line":22,"column":5,"nodeType":"241","messageId":"242","endLine":22,"endColumn":24},{"ruleId":"239","severity":1,"message":"281","line":31,"column":5,"nodeType":"241","messageId":"242","endLine":31,"endColumn":24},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'ProductCarousel' is defined but never used.","'Row' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Logins' is defined but never used.","react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","Literal","putCommentInBraces","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'useEffect' is defined but never used.","'Link' is defined but never used.","Expected '===' and instead saw '=='.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["282"],"'PayPalButton' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'order._id'. Either include them or remove the dependency array.",["283"],"React Hook useEffect has missing dependencies: 'history' and 'userInfo'. Either include them or remove the dependency array.",["284"],"'Component' is defined but never used.","'clientId' is assigned a value but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","'onSuccess' is assigned a value but never used.","'onFailure' is assigned a value but never used.","'Button' is defined but never used.","'USER_UPDATE_PROFILE_RESET' is defined but never used.","'data' is assigned a value but never used.","'ORDER_PAY_RESET' is defined but never used.","'ORDER_LIST_MY_RESET' is defined but never used.","'ORDER_DELIVER_RESET' is defined but never used.",{"desc":"285","fix":"286"},{"desc":"287","fix":"288"},{"desc":"289","fix":"290"},"Update the dependencies array to be: [user, userId, successUpdate, history, dispatch]",{"range":"291","text":"292"},"Update the dependencies array to be: [success, history, order._id, dispatch]",{"range":"293","text":"294"},"Update the dependencies array to be: [dispatch, order, orderId, successPay, successDeliver, userInfo, history]",{"range":"295","text":"296"},[1532,1570],"[user, userId, successUpdate, history, dispatch]",[1358,1376],"[success, history, order._id, dispatch]",[2432,2486],"[dispatch, order, orderId, successPay, successDeliver, userInfo, history]"]